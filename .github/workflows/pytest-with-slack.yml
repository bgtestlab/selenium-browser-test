name: Pytest with slack app

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Test environment'
      tags:
        description: 'Test scenario tags'

jobs:
  pytest:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create env file
      run: |
        touch .test.env
        echo "TEST_ENVIRONMENT=${{ github.event.inputs.environment }}" >> .test.env
        echo "PYTEST_TAGS=${{ github.event.inputs.tags }}" >> .test.env
        cat .test.env

    - name: Run pytest
      run: |
        docker-compose --env-file=.test.env -f ./docker_with_slack/docker/docker-compose.yaml config
        docker-compose --env-file=.test.env -f ./docker_with_slack/docker/docker-compose.yaml up \
        --abort-on-container-exit \
        --exit-code-from test-runner

    - name: Extract test results
      run: |
        docker cp test-runner:/app/report.html .
      if: always()
      
    - name: Send test results message to Slack
      id: slack
      uses: slackapi/slack-github-action@v1.18.0
      with:
        payload: |
          {
            "text": "GitHub Action test result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text":  "Test result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Server:*\n${{ github.event.inputs.environment }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Target:*\n${{ github.event.inputs.tags }}"
                  }
                ]
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      if: always()

    - name: Send test report to Slack
      run: |
        curl -F file=@report.html -F "initial_comment=Test Report" -F channels=C02NNKV205R -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" https://slack.com/api/files.upload
      if: always()
